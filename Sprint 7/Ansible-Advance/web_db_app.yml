- 
  # Playbook Name: Deploy a web application
  # Description: This playbook sets up a web application environment by installing necessary dependencies, configuring a MySQL database, 
  # deploying the application code, and starting the application.
  name: Deploy a web application
  
  # Hosts: Specifies the target group of hosts defined in the inventory file. In this case, it includes both database and web servers.
  hosts: db_and_web_server

  # Variables: Defines reusable variables for database configuration to avoid hardcoding sensitive information multiple times.
  vars:
    db_name: employee_db  # Name of the database to be created.
    db_user: db_user      # Username for the database.
    db_password: Passw0rd # Password for the database user.

  tasks:
    # Task 1: Install system dependencies required for Python and MySQL functionality.
    - name: Install dependencies
      apt: 
        name: "{{ item }}" 
        state: present  # Ensures the listed packages are installed.
      with_items:
       - python
       - python-setuptools
       - python-dev
       - build-essential
       - python-pip
       - python-mysqldb

    # Task 2: Install MySQL server and client packages.
    - name: Install MySQL database
      apt:
        name: "{{ item }}"
        state: present
      with_items:
       - mysql-server
       - mysql-client

    # Task 3: Start the MySQL service and ensure it is enabled to start at boot.
    - name: Start Mysql Service
      service:
        name: mysql
        state: started   # Ensures the MySQL service is running.
        enabled: yes     # Ensures the service starts on boot.

    # Task 4: Create the application database using the `mysql_db` module.
    - name: Create Application Database
      mysql_db: 
        name: "{{ db_name }}"  # Name of the database to create.
        state: present         # Ensures the database exists.

    # Task 5: Create a MySQL user for the application with specified privileges.
    - name: Create Application DB User
      mysql_user: 
        name: "{{ db_user }}"          # Database username.
        password: "{{ db_password }}"  # Password for the user.
        priv: '*.*:ALL'                # Full privileges on all tables for this user.
        host: '%'                      # Allows connections from any host.
        state: present                 # Ensures the user exists.

    # Task 6: Install Python Flask and Flask-MySQL dependencies via pip.
    - name: Install Python Flask dependencies
      pip:
        name: "{{ item }}"
        state: present  # Ensures the required Python packages are installed.
      with_items:
       - flask          # Flask framework for building web applications.
       - flask-mysql    # Flask extension for interacting with MySQL databases.

    # Task 7: Copy the application code (app.py) from the local system to the target server.
    - name: Copy web-server code
      copy: 
        src: app.py      # Source file on the Ansible control node.
        dest: /opt/app.py # Destination path on the target servers.

    # Task 8: Start the Flask web application as a background process.
    - name: Start web-application
      shell: FLASK_APP=/opt/app.py nohup flask run --host=0.0.0.0 & 
      # Explanation:
      # - `FLASK_APP=/opt/app.py`: Sets the Flask application environment variable.
      # - `nohup flask run --host=0.0.0.0 &`: Runs the Flask application in the background, listening on all available network interfaces.
